#ifndef ENCODER_H_
#define ENCODER_H_

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "IfxPort.h"
#include "Bsp.h"

#define A               &MODULE_P15,0
#define B               &MODULE_P15,1

#define PI              3.14159265358979323846
#define PPR             48
#define SAMPLETIME      0.001

//#define ALPHA 0.4736842105263158 //900
//#define ALPHA 0.5
#define cut_off 1000 //700

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*-------------------------------------------------Data Structures---------------------------------------------------*/
/*********************************************************************************************************************/
 typedef struct
{
         uint8 A_data;
         uint8 B_data;
         uint8 AB_data;
         uint8 AB_bef;
         int AB_Cnt;
         int AB_Cnt_bef;

         double rad_per_sec;
         double rad_per_sec_old;

         double rad_per_sec_filter;
         double rad_per_sec_old__filter;

         //
         double cur_angle;
         double old_angle;

         int diffCnt;

}App_Encoder;

// PI
typedef struct {
    float Kp;          // 비례 이득
    float Ki;          // 적분 이득
    float integral;    // 적분 값 (누적 오차)
    float prev_error;  // 이전 오차 값
    float setpoint;    // 목표값
}PI_Controller;
/*********************************************************************************************************************/
/*--------------------------------------------Private Variables/Constants--------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/

extern App_Encoder g_Encoder;
extern PI_Controller g_PI_Controller;

void Encoder_Init(void);
void readEncoderTick(void);
void Conv_rad_per_sec(void);

double low_pass_filter(double input, double prev_output);

void PI_Init(float Kp, float Ki, float setpoint);

double PI_Control(float measured_value, float dt);

//
void EncoderPulsesToAngle(int pulse_count);

#endif /* ENCODER_H_ */
